Copyright (C) 2017-2025 John Cage.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".

svlogo.png Copyright (C) 2017-2025 John Cage.

Permission is granted to copy, distribute and/or modify svlogo.png
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".

ï»¿About StoneValley Project

i   Preface

	*) The author claimed that he does will refine source files and references later and he needs time and arms to fix it.
	*) Should you have any problems with this library, please do not hesitate to contact the author via Email(Email appears in each .C or .H file.).

ii  Acknowledgment

	*) Bugs may cause nuisances in StoneValley, although this library has been tested for a considerable quantity of times. So, JBC(Just Be Careful).

iii Table of Contents

	[Contents]                                                    [Line number]
	Preface ................................................................ 21
	Acknowledgment ......................................................... 26
	Table of Contents ...................................................... 30
	Scenario ............................................................... 45
	Naming ................................................................. 82
	Callbacks ............................................................. 127
	Checklist ............................................................. 131
	Alteration Guide ...................................................... 166
	Limitations ........................................................... 315
	Appendix .............................................................. 325
	GNU Free Documentation License ........................................ 331

iv  Scenario

	StoneValley is a programming library that was written in plain C programming language and aimed at providing its users a set of functions with a variety of algorithms that could manipulate various data structures. This Readme file briefly introduced this library in a users' perspective. Contents in this Readme file guide users in an approach of what it is, how to use it and how to reprogram it. To advance and proficiently utilize this library need users to practice programming with it.

	Divided into several parts were String, Stack, Queue, Tree, Hash table, Graph and Set laid in StoneValley.
	 ________ ________ ________ _________
	[ strING }        {  treE  }        {{ [Figure 1]
	[       _}        {_      _}        {_
	[      }    stACk   {    }     set    {{
	[      }_          _{    }_          _{{
	[        }   __   {        }   __   }}
	[__    __}__{  }__{__    __}__{{ }__}}
	[  {__}  {  hAsh  }  {__}  {{
	[        {_ table_}        {_     AA
	[          {    }            {{ WW  II
	[  queUE  _{    }_   grApH  _{{    T
	[   __   {        }   __   {{
	[__{{ }__{__    __}__{{ }__{{     UU
	[           {__}}
	 Rather to portray a fuzzy calling relationship between procedures and subroutines in StoneValley, a plot distinguishes functions into parts shows the real formation of StoneValley less unpleasant. Users could always add their own appliances manque for StoneValley.

	Inquiring deeper inside this library, string is a collection of linear data structures which contain array, single linked-list, doubly linked-list, bit-stream, common matrix, bit-matrix and sparse matrix. Functions that operate on these linear data structures were distributed into file "svstring.h". Furthermore, files "svatom.c", "svarray.c", "svlist.c", "svmatrix.c" and "svmisc.c" stored definitions of these functions.

	File "svstack.c" implemented stacks of which file "svstack.h" gathered their declarations. Two species of stack implementations involved in this library that they were devised as fixed size array type and single linked-list type. For users, Fixed-size-array stacks are suitable to use in memory space concerned situations. While articulated linked-list stacks are convenient to use for circumstances that dynamic memory allocation is allowed.

	Functions for queues were exported into "svqueue.h" and simultaneously implemented in file "svqueue.c". Three types of queue implementations have been written in StoneValley. Fixed size array implementation for circular queues and single linked-list implemented queues were both collected in the library. A doubly linked-list achievement for dequeues(Double-Ended Queues) was another participant. Like stacks, users may use fixed-size-array queues to strictly control memory spaces. If users need to allocate memory spaces dynamically, elastic linked-list queues are accessible to work.

	Too many tree data structures appear on the world. Only a few important trees were achieved since StoneValley cannot implement them one by one. Planted in the library were binary trees used doubly pointer nodes. Generic trees benefited from arrays; Heap trees took advantage of fixed size arrays and BSTs(Binary search trees) utilized AA-trees. Other three searching/indexing trees occupied in the library were AVL tree, B-Plus tree and array-achieved trie. Finally, a Huffman-coding tree settled in StoneValley at file "svctree.c". As the same manner, functions for trees were exported into a header file named "svtree.h". Different source files implemented diverse types of trees. These source files were "svbytree.c", "svgtree.c", "svhtree.c", "svstree.c" and "svctree.c" for the reason that "by" denoted "binary", "g" meant "generic", "h" dictated "heap", "s" indicated "searching" and "c" represented "coding".

	Header file "svhash.h" contained function declarations for hash tables. Hash table function bodies have been outputted into "svhash.c". In detail, separate chaining hash tables used linked-lists as buckets, open addressing hash tables used fixed size arrays as grills to separate items. At file "svhash.h", type "CBF_HASH" declared the hash function prototype. When using hash tables, users need to write their own callback hash function definitions to let StoneValley library hash functions invoke them to hash items. Interiors of this header and source will inform users more precisely for hashing.

	Set is another facility that provided by StoneValley. Sets exert both hash tables and Binary-search-trees to manage their elements. StoneValley interfaced set in file "svset.h". Meanwhile, implementations were written in "svset.c". Users may use these functions to insert and remove elements into sets and make unions, intersections and differences between sets.

	As for graphs, file "svgraph.c" schemes graph data structures whose interface is "svgraph.h". Adjacency lists that made by single pointer nodes linked edges of vertices for a graph together rather to use a matrix to present connections of vertices. Many operations defined by functions could be use to maneuver graphs such as calculating the shortest path and generating a minimum spanning tree.

	At last, file "svmisc.c" vacates a habitat for extra algorithms and structures. Besides accomplished functions for bit-streams, vastly used algorithms like quick sort and binary search were arranged at this file to treat data in consecutive memory spaces.

v  The naming of library functions and types

	The nomenclature for StoneValley observe guidelines. Prefixes, infixes and suffixes are used to stipulate identifiers. For functions named with prefix, such as function "stkInitA", the prefix "stk" shows this function belongs to a group of stack structures. Thus, users should include "svstack.h" first to use this function. The infix "Init" means "stkInitA" operates on initializing stack structures. The final "A" denotes that this function initializes an array formed stack. And "stkInitL" interpreted to initialize a linked-list stack. Have a notice that the word "Init" and "Create" are distinct in StoneValley. "Init" labeled functions meant to initialize objects which already existed in main memory. Then, users should pass pointers of structures into parameters of "Init" labeled functions. Comparatively, functions contain the word "Create" will acquire new spaces for structures in RAM in the beginning and return pointers to structures at the end of their executions. If an "Init" function were used to allocate a structure, respectively, when the structure were needed to deallocate, users should bring a free function to bear. In the same way, if a creation function were adopted to fetch a pointer of a structure, a deletion function would be required to disburden memory spaces of this structure later.

	+__Category__________________________Type_________Location___+ [Figure 2]
	|strING______________________________|___________<svstring.h>|
	|    + Fixed size array              :ARRAY_Z:    svarray.c  |
	|    + Single linked list            :LIST_S:     svlist.c   |
	|    + Double linked list            :LIST_D:      ditto.    |
	|    + Bit stream                    :BITSTREAM:  svmisc.c   |
	|    + Common matrix                 :MATRIX:     svmatrix.c |
	|    + Bit matrix                    :BITMAT:      ditto.    |
	|    + Sparse matrix                 :SPAMAT:      ditto.    |
	|stACk_______________________________|___________<svstack.h>_|
	|    + Array represented stack       :STACK_A:    svstack.c  |
	|    + Linked list represented stack :STACK_L:     ditto.    |
	|treE________________________________|___________<svtree.h>__|
	|    + Binary tree                   :BYTREE:     svbytree.c |
	|        + Binary search tree        :BST:        svstree.c  |
	|            + AA tree                ditto.       ditto.    |
	|            + AVL tree               ditto.       ditto.    |
	|        + Huffman coding tree        N/A.        svctree.c  |
	|    + Generic tree                  :GTREE:      svgtree.c  |
	|    + Heap tree                     :HEAP_A:     svhtree.c  |
	|    + B-plus tree                   :BPT:        svstree.c  |
	|    + Trie                          :TRIE_A:      ditto.    |
	|set_________________________________|___________<svset.h>___|
	|    + Hash table set                :SET_H:      svset.c    |
	|    + Binary search tree set        :SET_T:       ditto.    |
	|queUE_______________________________|___________<svqueue.h>_|
	|    + Array style circular queue    :QUEUE_A:    svqueue.c  |
	|    + Single linked list queue      :QUEUE_L:     ditto.    |
	|    + Double ended queue            :DEQUE_DL:    ditto.    |
	|hAsh TABLE__________________________|___________<svhash.h>__|
	|    + Separate chaining hash table  :HSHTBL_C:   svhash.c   |
	|    + Open addressing hash table    :HSHTBL_A:    ditto.    |
	|grApH_______________________________|___________<svgraph.h>_|
	|    + Adjacency list graph          :GRAPH_L:    svgraph.c  |
	|____________________________________|_______________________|
	 Variants of structures are listed in the above diagram. Users may use this diagram as a quick reference for basic types in library.

	Secondarily, function name "setSizeT_O" explored that there must be a macro to inline this function and this macro is written as "setSizeT_M", because letter "O" instead of declaring the original function and letter "M" tailed declaration claimed its macro version. Inline functions by using macros would avoid conflicts during linkage between different linkers. But the drawback of macro-inline is that library maintainers have to write one function for twice. Firstly, maintainers should write an original edition for a function. Secondly, library maintainers need to write it again for its macro version. It seems to be verbose but it is a useful manner to practice in a mass of compiling environments.

	Not until a great number of types bounced into StoneValley, did identifiers become tricky. For example, "STACK_A" is a type for stacks, and such stacks are made of arrays. Then "P_STACK_A" can define pointers to this array implemented stack. Type "SET_H" at "svset.h" derived from type "HSHTBL_C". It is not hard to imagine the implication of this kind of naming. "SET_H" implies the type of sets that consist of hash tables derived from separate chaining hash table type. Certainly, pointers to hash table implemented sets can be declared by "P_SET_H". Naming guidelines for function parameters are feasible to recognise too. For instance, "P_SET_H", the type of the first parameter of function "setInitH_O" at "svhash.h" means users should transfer a pointer to a hash table implemented set to this parameter while invoking. Suffix "CBF" explained types of callback functions. Therefore some parameters whose names are defined with "CBF_HASH" mean that users should pass the address to a hash function while invoking the callee.

vi  Callback functions and their usages

	Another crucial point of using StoneValley is to understand callback functions. There are two main types of callback functions. One is the type of callback function that used to traverse items in structures. The other is the type of callback function that used to compare values by pointers. The first one named as "CBF_TRAVERSE". The second one labeled as "CBF_COMPARE". Details about how to use these two types of callback functions are located at file "svdef.h". Additionally, two important values of callback function "CBF_TRAVERSE" returns are "CBF_TERMINATE" and "CBF_CONTINUE". 0, 1 and -1 will return after calling a "CBF_COMPARE" function. The callees for caller callback functions should obey their specific calling conventions.

vii Here is a simple checklist. Please retrieve it before you compile this library.
	 _________________________________________________________________
	|o               # BEFORE COMPILING CHECK LIST #                 o|\ [Figure 3]
	|_____[ITEM]___________[TYPE]_____[LINES]_____[FILE]_____[MARK]___|\
	| [_] DWC4100           MACRO       82         SVDEF.H    ALTER   |\
	| [_] REGISTER          MACRO       85         SVDEF.H    CONFIRM |\
	| [_] SV_OPTIMIZATION   MACRO       93         SVDEF.H    ALTER   |\
	|                                                                 |\
	| ALTER:   Alter item if necessary.                               |\
	| CONFIRM: Confirm item before compiling.             StoneValley |\
	|o_____________________________________________?\________________o|\
	 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	Non-normal handling:
	*) Guiding actions will use upper case letters to type and a pair of '[]' to emphasize.

	StoneValley coded adhere to the Standard of C Programming language(iso9899:1990), and it has been tested. However, different compilers with different optimization criterion may lead compilers to produce different warnings and errors.

	1) Errors of missing symbols.
		In some environments, especially when users try to compile StoneValley on an embedded platform, because of the lack of supporting of the C standard library, compilers will produce errors. For instance, if there were not installed the header file "stdio.h", compilers might explain an error about missing macro 'BUFSIZ' for the library source file "svmisc.c". In this circumstance, users shall simply [IMPLEMENT] macro 'BUFSIZ' by themselves. In another way, users shall [COLLECT] missing macros in a header file that has the same name with the original header in the C standard library.

		If some C standard library functions that being used by functions in StoneValley were not implemented, compilers/linkers would report errors about missing symbols while linking. There are two ways to handle a missing of C standard library functions. First, [IMPLEMENT] the C standard library functions on users' own. Second, [REMOVE] functions that use missing C standard library functions in StoneValley directly.

	2) Warnings of inline function expansion.
		Most optimizing compiler will automatically expand inline functions for a better performance. In general, library users could [NEGLECT] those warnings when compilers were attempting to expand inline functions. To [TURN] library optimization switch at file "svdef.h" into value 'SV_OPT_DISABLED' could avoid any errors which caused by inline macros.

	3) Warnings of type casting and structure alignment.
		Some compilers set strict type checking rules, when users tried to compile StoneValley through these compilers, these compilers would generate warnings. For instance, first, casting a variable from type (const void *) to (void *) may emit a warning of dropping 'const' qualifier. Second, to truncate an (int) integer to (unsigned char) may lead compilers warn users of precision losing and sign missing. Third, when compilers are attempting to align member variables in structures with a fixed length while it needs padding bytes to alter the original structure, compilers may warn users either. If these warnings did not involve bad results for user programs, library users could [IGNORE] them.

	4) Warnings of library function returns.
		Some compilers installed with code analysis techniques would check return values of functions in the C standard library. For example, it would check if the "realloc" function might return a NULL pointer to its left-hand-side expression. Library users could [IGNORE] these types of warnings.

	5) Other concerns.
		If an architecture did not support users to use too many register variables, compilers would produce warnings. Library users could comment the 'REGISTER' macro at file "svdef.h" or [IGNORE] compiler produced warnings.

viii Library Alteration Guide

	The next instruction will guide you fix the library. This instruction has been divided into three parts, [a] [b] and [c].
	*) Optional procedures differ from others that optional lines titled by digits and brackets such as '0)' while digits and dot such as '0.' title other operations.

	a] Macro inline an existed function in the library:

	$BEFORE$$$$$$$$$$$$$$$$$$$      $AFTER$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ [Figure 4]
	$ /* Name: example       $ 1.=> $ /* Name: example_O                       $
	$  * ...                 $      $  * ...                                   $
	$  *                     $ 2)=> $  * Tip: Macro example_M exists at xxx.h. $
	$ int example(int param) $ 3.=> $ int example_O(int param)                 $
	$ {                      $      $ {                                        $
	$      return param + 1; $      $      return param + 1;                   $
	$ }                      $      $ }                                        $
	$$$$$$$$$$$$$$$$$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

		1. Append an '_O' sign to the tail of the original function name in the comments above its declaration.
		2) Write a tip in the comments above the function declaration to notice users what name the macro is and where the macro locates. (Optional)
		3. Append an '_O' sign to the tail of the original function name in the declaration.

	$BEFORE$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$      $AFTER$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ [Figure 5]
	$ int example(int param);                  $ 4.=> $ int example_O(int param);                  $
	$ int example_O(int param) {               $ 5.=> $ #define example_M(param_M) ((param_M) + 1) $
	$      return param + 1;                   $ 6.   $                                            $
	$ }                                        $ 7.   $                                            $
	$ #if   SV_OPTIMIZATION == SV_OPT_MINISIZE $      $ #if   SV_OPTIMIZATION == SV_OPT_MINISIZE   $
	$     #define example example_O            $ 8)=> $     #define example example_M              $
	$ #elif SV_OPTIMIZATION == SV_OPT_MAXSPEED $      $ #elif SV_OPTIMIZATION == SV_OPT_MAXSPEED   $
	$     #define example example_O            $ 8)=> $     #define example example_M              $
	$ #elif SV_OPTIMIZATION == SV_OPT_FULLOPTM $      $ #elif SV_OPTIMIZATION == SV_OPT_FULLOPTM   $
	$     #define example example_O            $ 8)=> $     #define example example_M              $
	$ #else                                    $      $ #else                                      $
	$     #define example example_O            $      $     #define example example_O              $
	$ #endif                                   $      $ #endif                                     $
	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

		4. Append an '_O' sign to the tail of the original function name in the definition at the proper header file.
		5. Copy the entire function declaration bellow definitions block in header.
		6. Cut types off and add "#define" in the beginning of the declaration.
		7. Alter '_O' sign in function name into '_M'. Append an '_M' sign at each parameter in declaration to prevent arguments confuse preprocessor. Please cross reference section [b] [Figure 6] and [Figure 7] for more details about inline.
		8) Write the original function name and its macro name into a block that used to optimize library as needed. (Optional) Notice that if function name were written in any branches of preprocessor directives, function should appear in other branches simultaneously.
		9. Finish.

	b] Altering an existed function in the library:
		1. Alter a function and check whether it has a macro version.
		2. If the function you amended has an '_O' sign at the tail of its name, then both alter its macro version in the proper header file. See section [a] [Figure 4] and [Figure 5] for altering macros in detail.

	$BEFORE$$$$$$$$$$$$$$$$$$$      $AFTER$$$$$$$$$$$$$$$$$$$$$$$$$$ [Figure 6]
	$ void svInit(int * p) { $ 3.=> $ #define svInit_M(p_M) do { \ $
	$      *p = 0;           $      $     *(p_M) = 0; \            $
	$ }                      $      $ } while(0)                   $
	$$$$$$$$$$$$$$$$$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

		3. If the original function has NO return value and it is simple, write its macro version and use '{}' to brace it in multiple lines.

	$BEFORE$$$$$$$$$$$$$$$$$$$$$$      $AFTER$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ [Figure 7]
	$ int svAdd(int a, int b) { $ 4.=> $ #define svAdd_M(a_M, b_M) ((a_M) + (b_M)) $
	$      return a + b;        $      $                                           $
	$ }                         $      $                                           $
	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

		4. If the original function HAS a return value and it is brief, write its macro version in one line and use '()' to brace it.
		5. Altering done.

	c] Adding a non-exist function into library:

	An example of headers:                        [Figure 8]
	$header.h$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	$ /* Comments.                                         $ + Comment file here.
	$  */                                                  $ *
	$ #ifndef _HEADER_H_                                   $ + Write preprocessors directives here to include header once.
	$ #define _HEADER_H_                                   $ |
	$                                                      $ |
	$ #include <svdef.h>                                   $ | + Include common headers here.
	$                                                      $ |
	$ #define MACRO macro                                  $ | + Macros are defined here.
	$                                                      $ |
	$ typedef TYPE Alias;                                  $ | + Types are defined here.
	$                                                      $ |
	$ int svInit_O(int * p);                               $ | + Library functions are exported here.
	$ void svBig2(int * pa, int * pb, CBF_COMPARE cbfcmp); $ | * [c]4.
	$                                                      $ |
	$ #define svInit_M(p_M) (*(p_M) = 0)                   $ | + Function inline macros are written here. [c]5.
	$                                                      $ |
	$ #if   SV_OPTIMIZATION == SV_OPT_MINISIZE             $ | + Library optimization switches go here. [c]6.
	$     #define svInit svInit_M                          $ | |
	$ #elif SV_OPTIMIZATION == SV_OPT_MAXSPEED             $ | |
	$     #define svInit svInit_M                          $ | |
	$ #elif SV_OPTIMIZATION == SV_OPT_FULLOPTM             $ | |
	$     #define svInit svInit_M                          $ | |
	$ #else                                                $ | |
	$     #define svInit svInit_O                          $ | |
	$ #endif                                               $ | *
	$                                                      $ |
	$ #endif                                               $ *
	$                                                      $
	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	An example of source files:                   [Figure 9]
	$source.c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	$  /* Comments.                                        $ + Comment file here.
	$   */                                                 $ *
	$  #include "header.h"                                 $ + Include headers here.
	$                                                      $
	$  #define _MACRO _macro                               $ + File scope macros are defined here.
	$                                                      $
	$  typedef _TYPE _Alias;                               $ + File scope types are defined here.
	$                                                      $
	$  int _cbfcmp(const void * pa, const void pb);        $ + File level function definitions go here. [c]3.
	$                                                      $ + Function declarations perch in this territory.
	$  /* Comments.                                        $ | + Function declaration begin.
	$   */                                                 $ | |
	$  int svInit_O(int * p)                               $ | |
	$  {                                                   $ | |
	$      return *p = 0;                                  $ | |
	$  }                                                   $ | *
	$                                                      $ |
	$  /* Comments.                                        $ | + Function declaration begin. [c]2.
	$   */                                                 $ | |
	$  int _cbfcmp(const void * pa, const void pb)         $ | |
	$  {                                                   $ | |
	$      if (*(int *)pa > *(int *)pb) return  1;         $ | |
	$      if (*(int *)pa < *(int *)pb) return -1;         $ | |
	$      return 0;                                       $ | |
	$  }                                                   $ | *
	$                                                      $ |
	$  /* Comments.                                        $ | + Function declaration begin. [c]1.
	$   */                                                 $ | |
	$  void svBig2(int * pa, int * pb, CBF_COMPARE cbfcmp) $ | |
	$  {                                                   $ | |
	$      if (cbfcmp(pa, pb) < 0)                         $ | |
	$      {                                               $ | |
	$          int t = *pa;                                $ | |
	$          *pa = *pb;                                  $ | |
	$          *pb = t;                                    $ | |
	$      }                                               $ | |
	$  }                                                   $ | *
	$                                                      $ *
	$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	 The above two figures may give users a synopsis of the arrangement of library files for StoneValley.

		1. Write a definition for a new function.
		2. If the new function you wrote needs another callback function, then write the callback function for it. Then add an underscore '_' at the beginning of the callback function to declare it as an internal function.
		3. If you wrote a definition for a callback function, both implement its declaration at the top of the current file section.
		4. Implement a declaration for your original new wrote function into proper header file.
		5. If you need to inline a new wrote function, write a macro version in the appropriate header file. And plus an '_O' to end of the original one. Add '_M' signs onto its name and all parameters for the macro version at header file. See section [a] and [b] for altering macros in detail.
		6. Put either name of the original function or its macro version into the right place at the bottom of header file to optimize the performance of library. See section [a] for altering macros in detail.
		7. Addition done.

ix  Limitations

	Dependencies:
		Despite some of the fundamental functions in StoneValley can be run without The C Standard Library, most part of this library needs dynamic memory allocation functions like 'malloc' and 'realloc' of The C Standard Library.

	Addressing:
		'size_t' which is a type of unsigned long integer is the very rudimentary data type of this library; It scales the number of entities that this library could allocate. The difference of subtraction of pointers restricted by data type 'ptrdiff_t' which derived from "stddef.h" of C Standard Library describes results of pointer arithmetic operations.

		The length of a 'size_t' integer depends on the specific machine environment that implements C programming language, and then the length of a 'size_t' integer limits the addressing capability of most data structures in StoneValley.

x  Star me to support an open network and boycott Chinese government from building the Great Fire Wall!

	The Story About StoneValley

	To think about the integration of algorithms might be a valuable job. In 2016, I was considering about this topic. And meanwhile, other coding projects urged me to write a such programming library. Yes, I needed a collection of algorithms and useful data structures. When you got well ready to your project, you are almost succeeded. I found all books about algorithms and data structures on my bookshelf and prepared to write StoneValley.

xi

                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
https://www.gnu.org/licenses/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole or
in part into the MMC, (1) had no cover texts or invariant sections, and
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.

